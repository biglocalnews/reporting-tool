schema {
  query: Query
  mutation: Mutation
}

scalar DateTime

type Organization {
  id: ID!
  name: String!
  teams: [Team!]!
}

type Team {
  id: ID!
  name: String!
  users: [User!]!
  programs: [Program!]!
  organizations: [Organization!]!
}

type User {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  roles: [Role!]!
  teams: [Team!]!
}

type Role {
  id: ID!
  name: String!
  description: String!
}

type Program {
  id: ID!
  name: String!
  description: String!
  team: Team!
  datasets: [Dataset!]!
  targets: [Target!]!
  tags: [Tag!]!
}

type Tag {
  id: ID!
  name: String!
  description: String
  tagType: String!
  programs: [Program!]!
  datasets: [Dataset!]!
}

input TagInput {
  id: ID
  name: String!
  description: String
  tagType: String!
}

type Target {
  id: ID!
  # Assumption: all datasets in a program have the same targets
  program: Program!
  categoryValue: CategoryValue!
  target: Float!
}

type Category {
  id: ID!
  name: String!
  description: String!
}

type Dataset {
  id: ID!
  name: String!
  description: String
  lastUpdated: DateTime
  program: Program!
  records: [Record!]!
  tags: [Tag!]!
}

type Record {
  id: ID!
  dataset: Dataset!
  publicationDate: DateTime!
  entries: [Entry!]!
}

type CategoryValue {
  id: ID!
  name: String!
  category: Category!
}

type Entry {
  id: ID!
  categoryValue: CategoryValue!
  count: Int!
  inputter: User!
}

type Description {
  id: ID!
  description: String!
}

input UpsertUserInput {
  id: ID
  firstName: String!
  lastName: String!
  email: String!
  role: String!
}

input CreateDatasetInput {
  name: String!
  description: String!
  programId: ID!
  tags: [TagInput!]!
}

input UpdateDatasetInput {
  id: ID!
  name: String
  description: String
  programId: ID
  inputterId: ID
  tags: [TagInput!]
}

input UpdateRecordInput {
  id: ID!
  datasetId: ID
  publicationDate: DateTime
  entries: [EntryInput!]
}

input CreateRecordInput {
  datasetId: ID!
  publicationDate: DateTime!
  entries: [EntryInput!]
}

input CreateCategoryInput {
  name: String!
  description: String!
}

input UpdateCategoryInput {
  id: ID!
  name: String
  description: String
}

input CreateCategoryValueInput {
  name: String!
  categoryId: ID!
}

input UpdateCategoryValueInput {
  id: ID!
  name: String
  categoryId: ID
}

input EntryInput {
  id: ID
  inputterId: ID!
  categoryValueId: ID!
  count: Int!
}

input CategoryInput {
  id: ID
  name: String!
  description: String!
}

type Query {
  # Retrieve a single user.
  user(id: ID!): User!

  # Retrieve a single dataset.
  dataset(id: ID!): Dataset!

  # Retrieve a single Record.
  record(id: ID!): Record!

  # Retriever a single program.
  program(id: ID!): Program!

  # Retrieve a single category.
  category(id: ID!): Category!

  # Retrieve a single categoryValue.
  categoryValue(id: ID!): CategoryValue!
}

type Mutation {
  # Create a Dataset
  createDataset(input: CreateDatasetInput): Dataset!

  # Delete a Dataset
  deleteDataset(id: ID!): ID!

  # Update a Dataset
  updateDataset(input: UpdateDatasetInput): Dataset!

  # Create a Record
  createRecord(input: CreateRecordInput!): Record!

  # Update a Record
  updateRecord(input: UpdateRecordInput!): Record!

  # Delete a Record
  deleteRecord(id: ID!): ID!

  # Create a Category
  createCategory(input: CreateCategoryInput): Category!

  # Update a Category
  updateCategory(input: UpdateCategoryInput): Category!

  # Delete a Category
  deleteCategory(id: ID!): ID!

  # Create a CategoryValue
  createCategoryValue(input: CreateCategoryValueInput!): CategoryValue!

  # Update a CategoryValue
  updateCategoryValue(input: UpdateCategoryValueInput!): CategoryValue!

  # Delete a CategoryValue
  deleteCategoryValue(id: ID!): ID!
}
