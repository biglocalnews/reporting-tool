schema {
    query: Query
    mutation: Mutation
}

scalar Date

type Organization {
    id: ID!
    name: String!
    teams: [Team]
}

type Team {
    id: ID!
    name: String!
    users: [User]
    programs: [Program]
    organizations: [Organization]
}

type User {
    id: ID!
    firstName: String!
    lastName: String!
    role: Role!
}

type Role {
    id: ID!
    name: String!
    description: String!
}

type Program {
    id: ID!
    description: String! 
    team: Team
    datasets: [Dataset]
    targets: [Target]
    tags: [Tag]
}

type Tag {
    id: ID!
    name: String!
    description: String!
    tagType: String!
    programs: [Program]
    dataset: [Dataset]
}

type Target {
    id: ID!
    program: Program!
    category: String!
    categoryValue: String!
    target: Float
}

type Dataset {
    id: ID!
    name: String!
    description: String!
    program: Program!
    records: [Record]!
    inputter: User!
    tags: [Tag]
}

type Record {
    id: ID!
    dataset: Dataset!
    publicationDate: Date
    category: String!
    categoryValue: String!
    count: Int
}

input UpsertUserInput {
    id: ID
    firstName: String!
    lastName: String!
    role: String!
}

type UpsertUserOutput {
    user: User
}

input DeleteUserInput {
    id: ID!
}

type DeleteUserOutput {
    id: ID!
}

type Query {
    # Retrieve a single user.
    user(userId: ID!) : User!

    # Retrieve all users associated with a specific team.
    teamUsers(teamId: ID!) : [User]!

    # Retrieve all users associated with a specific program.
    programUsers(programId: ID!) : [User]!
}

type Mutation {
    # Upsert a user.
    upsertUser(input: UpsertUserInput) : UpsertUserOutput!

    # Delete a user.
    deleteUser(input: DeleteUserInput!) : DeleteUserOutput!
}
